# Neynar

## Docs

- [Add a Verification](https://docs.neynar.com/docs/add-a-verification.md): Walkthrough on how to add an ethereum or solana address as a verification to a user's farcaster profile
- [Address User Score Contract](https://docs.neynar.com/docs/address-user-score-contract.md): Get user quality score for an address connected to a Farcaster profile.
- [Create Farcaster Frames Using Neynar & Frog](https://docs.neynar.com/docs/analytics-frame-neynar-frog.md): In this guide, we’ll learn how to make a frame with the neynar SDK and Frog.fm, within a few minutes! For this demo, it will be a simple rock-paper-scissors game but it will give you an idea of how to create multi-page frames, interact with buttons, and get analytics for your frame with no extra effort.
- [Mini App Hosts Notifications](https://docs.neynar.com/docs/app-host-notifications.md): Token management and inbound webhook handling for apps that host mini apps
- [Appendix](https://docs.neynar.com/docs/appendix.md): Understanding the new user registration process
- [Archive Casts](https://docs.neynar.com/docs/archiving-casts-with-neynar.md): Archiving Farcaster data with Neynar
- [Auth Address Signature Generation](https://docs.neynar.com/docs/auth-address-signature-generation.md): Generate a Signed Key Request using viem for registering auth addresses in Farcaster with Neynar
- [Build Interactive Farcaster Frames with Neynar](https://docs.neynar.com/docs/building-frames.md): Learn how to build interactive Farcaster frames 100x faster using Neynar's Frame Studio, no-code templates, and comprehensive Frame APIs. Create dynamic social experiences with validation, hosting, and embedding capabilities.
- [Cast Action with Analytics](https://docs.neynar.com/docs/cast-action-with-analytics-neynar.md): In this guide, we’ll make a cast action with the neynar SDK and frog.fm, within a few minutes! The cast action will fetch the follower count of the cast's author using its fid and display it.
- [Cast From Inside a Frame](https://docs.neynar.com/docs/casting-from-a-frame.md): In this guide, we'll look at how to build a frame using which people can create casts and perform other actions on the Farcaster app.
- [Find User Subscriptions with Neynar Hypersub](https://docs.neynar.com/docs/common-subscriptions-fabric.md): Finding Hypersub subscriptions on Social Token Protocol (STP) using Neynar
- [Convert a Web App to a Farcaster Mini App](https://docs.neynar.com/docs/convert-web-app-to-mini-app.md): Update any JavaScript web app to be a Farcaster mini app
- [Bot Replying with Frames](https://docs.neynar.com/docs/create-a-farcaster-bot-to-reply-with-frames-using-neynar.md): In this guide, we’ll take a look at how to create a Farcaster bot that replies to specific keywords with a frame created on the go specifically for the reply!
- [Cast Stream](https://docs.neynar.com/docs/create-a-stream-of-casts.md): Fetch stream of casts with Farcaster hubs
- [Create in UI](https://docs.neynar.com/docs/create-farcaster-bot-ui.md): Create a new Farcaster agent directly in Neynar dev portal
- [Create Farcaster Mini App (v2 frame) in < 60s](https://docs.neynar.com/docs/create-farcaster-frame-in-60s.md): Create a v2 Farcaster mini app in less than 60 seconds
- [Create Farcaster Mini App in < 60s](https://docs.neynar.com/docs/create-farcaster-miniapp-in-60s.md): Create a Farcaster mini app in less than 60 seconds
- [Create Multi Step Cast Action](https://docs.neynar.com/docs/create-multi-step-cast-action.md): In this guide, we’ll make a multi-step cast action, within a few minutes! The cast action will go ahead and return a frame which will show the cast hash.
- [Create Transaction Frames](https://docs.neynar.com/docs/create-transaction-frames.md): Learn how to create transaction frames that enable users to interact with blockchain transactions directly from Farcaster
- [Deploy a Token on Base with 1 API Call](https://docs.neynar.com/docs/deploy-token-on-base-with-api-call.md): This guide provides a step-by-step process to deploy a fungible token on the Base network using Neynar's API. The deployment process is simplified to a single API call, eliminating the need for developers to write Solidity code or handle on-chain transaction signing. Neynar covers the on-chain deployment fees and assigns the specified owner address as the token owner.
- [Understanding number diffs](https://docs.neynar.com/docs/differences-among-client-numbers.md): Learn why follower counts, reactions, and other metrics differ across Farcaster clients and tools like Merkle, Recaster, and Coinbase Wallet
- [Explore Event Propagation on Farcaster](https://docs.neynar.com/docs/explore-event-propagation-on-farcaster.md): Search for specific messages and debug Farcaster network health
- [Farcaster Actions Spec](https://docs.neynar.com/docs/farcaster-actions-spec.md): Complete specification for Farcaster Actions - enabling secure cross-app communication and actions using Farcaster signers
- [Farcaster Bot with Dedicated Signers](https://docs.neynar.com/docs/farcaster-bot-with-dedicated-signers.md): Create a Farcaster bot on Neynar in a few quick steps
- [Features (hidden from roadmap right now)](https://docs.neynar.com/docs/features-hidden-from-roadmap-right-now.md): Upcoming Neynar features and capabilities not yet shown on the public roadmap including Frame Studio enhancements and API improvements
- [Farcaster For You Feed](https://docs.neynar.com/docs/feed-for-you-w-external-providers.md): Retrieve a personalized For You feed for a user
- [Casts by Embed in Farcaster](https://docs.neynar.com/docs/fetch-casts-by-embed-in-farcaster.md): Show Farcaster casts that have attachments with Neynar
- [Relevant Holders for Coins](https://docs.neynar.com/docs/fetch-relevant-holders-for-coin.md): This guide provides an overview of how to use the Neynar API to fetch relevant holders of a fungible token.
- [Relevant Holders for Coins](https://docs.neynar.com/docs/fetch-relevant-holders-for-coin-on-base.md): This guide provides a comprehensive overview of how to use the Neynar API to fetch relevant holders of a fungible token.
- [Fetch signers](https://docs.neynar.com/docs/fetch-signers-1.md): The following guides show how to fetch signers if you don't have access to the custody address mnemonic of the user
- [Fetch Signers - Backend](https://docs.neynar.com/docs/fetch-signers-backend.md): This guide demonstrates how to get a list of signers for an account if the developer has the user's mnemonic/account private key (If not check: [Frontend (Wallet Integration)](docs/fetch-signers-frontend-wallet-integration))
- [Fetch Signers - Frontend (Wallet Integration)](https://docs.neynar.com/docs/fetch-signers-frontend-wallet-integration.md): This guide demonstrates how to get a list of signers for an account if the developer can't access the user's mnemonic. (If the developer has access to the mnemonic, check: [Backend](/docs/fetch-signers-backend))
- [Fetch & Display Farcaster Feeds with Neynar API](https://docs.neynar.com/docs/fetching-casts-from-memes-channel-in-farcaster.md): Complete guide to fetching and displaying casts from specific Farcaster channels using Neynar SDK. Learn how to retrieve channel feeds, filter content by channel IDs, and build engaging social media applications with real-time Farcaster data.
- [Notifications in Channel](https://docs.neynar.com/docs/fetching-channel-specific-notification-in-farcaster.md): Learn how to fetch channel-specific notifications for Farcaster users using Neynar API. Build focused notification systems that filter alerts by specific channels and parent URLs, perfect for channel-focused Farcaster clients and applications.
- [User by Wallet Address](https://docs.neynar.com/docs/fetching-farcaster-user-based-on-ethereum-address.md): Find Farcaster user profile based on ethereum address
- [Follow NFT Owners on Farcaster Using Neynar](https://docs.neynar.com/docs/following-all-farcaster-users-owning-cryptopunk.md): Comprehensive tutorial on how to automatically follow all Farcaster users who own specific NFTs like CryptoPunks. Learn to build Web3 social features by combining Farcaster social graphs with NFT ownership data using Neynar's powerful APIs.
- [Farcaster Frames with Analytics using Neynar & Framejs](https://docs.neynar.com/docs/framejs-farcaster-frames.md): In this guide, we’ll learn how to make a frame with the neynar SDK and Framejs, within a few minutes! For this demo, it will be a simple rock-paper-scissors game but it will give you an idea of how to create multi-page frames, interact with buttons, and get analytics for your frame with no extra effort.
- [Kafka Stream: Real-Time Farcaster Events via Neynar](https://docs.neynar.com/docs/from-kafka-stream.md): Ingest hydrated events from a hosted Kafka stream (as compared to dehydrated events from gRPC hub)
- [Build Farcaster Apps with Neynar SDK & API](https://docs.neynar.com/docs/getting-started-with-neynar.md): Complete beginner's guide to building on Farcaster with Neynar
- [Storage Units Allocation](https://docs.neynar.com/docs/getting-storage-units-allocation-of-farcaster-user.md): Fetch data about a user's storage allocation on Farcaster network with Neynar
- [Create a Farcaster Account with Wallet Integration](https://docs.neynar.com/docs/guide-to-creating-a-farcaster-account-with-wallet-integration.md): This document outlines the steps to successfully create a Farcaster account without having a end user mnemonic.
- [Frame Validation](https://docs.neynar.com/docs/how-to-a-frame-action-against-farcaster-hub-with-neynar-api.md): Validate incoming frame actions to get genuine data
- [Validate Farcaster Frames Using Neynar SDK](https://docs.neynar.com/docs/how-to-build-farcaster-frames-with-neynar.md): Build Farcaster frames 10x faster than starting from scratch with Neynar's frame validation API. Learn to validate frame actions, get user interaction details, and test frames locally with ngrok integration for rapid development.
- [Choose Among Data Products](https://docs.neynar.com/docs/how-to-choose-the-right-data-product-for-you.md): Pick between pulling or pushing data in the format that works for you
- [How to Contribute to @neynar/nodejs-sdk](https://docs.neynar.com/docs/how-to-contribute-to-neynarnodejs-sdk.md): Step-by-step guide for contributing to the Neynar Node.js SDK - from setup to submitting pull requests
- [Create a Farcaster Client with Next.js & Neynar](https://docs.neynar.com/docs/how-to-create-a-client.md): This guide will look at creating a Farcaster client using Next.js and the Neynar React SDK.
- [Create Farcaster Bots via Script Using Neynar SDK – Step-by-Step Guide](https://docs.neynar.com/docs/how-to-create-a-farcaster-bot.md): Complete guide to creating Farcaster bots on Neynar with automated scripts. Learn to set up bot accounts, manage dedicated signers, and deploy automated social interactions using Neynar SDK with ready-to-use examples and templates.
- [How to Create a Farcaster Channel Feed](https://docs.neynar.com/docs/how-to-create-a-feed-based-on-an-array-of-farcaster-users-copy.md): Create a feed for any channel (i.e. parent_url) on Farcaster protocol
- [Create new Farcaster Account](https://docs.neynar.com/docs/how-to-create-a-new-farcaster-account-with-neynar.md): Currently, this API is allowlisted. Please get in touch with us if you wish to access this feature.
- [Dynamic Frame Creation](https://docs.neynar.com/docs/how-to-create-frames-using-the-neynar-sdk.md): Take a look at how to create frames on the fly using our SDK
- [How to create frames without code using Frames studio](https://docs.neynar.com/docs/how-to-create-frames-without-code-using-frames-studio.md): In this guide, we’ll take a look at how to create Farcaster frames without writing a single line of code, using our Frames studio.
- [Programmatic Webhooks](https://docs.neynar.com/docs/how-to-create-webhooks-on-the-go-using-the-sdk.md): Neynar webhooks are a way to receive real-time updates about events on the Farcaster protocol. You can use webhooks to build integrations that respond to events on the protocol, such as when a user creates a cast or when a user updates their profile.
- [Customize Sign In With Neynar (SIWN) Button – Style, Branding, and Auth Flow](https://docs.neynar.com/docs/how-to-customize-sign-in-with-neynar-button-in-your-app.md): Comprehensive guide to customizing Sign In With Neynar (SIWN) for seamless Farcaster authentication. Learn to customize the sign-in experience, integrate write access permissions, and connect user accounts to your app in minutes with custom styling and branding.
- [Overview](https://docs.neynar.com/docs/how-to-embed-farcaster-frames-in-your-app-with-neynar.md): Host Frames on your product and let users interact with them directly
- [How to Create a Feed Based on an Array of Farcaster Users](https://docs.neynar.com/docs/how-to-fetch-farcaster-feed-for-a-given-user-copy.md): Create a feed based on a given input of Farcaster users
- [Find Mutual Follows and Followers in Farcaster Using Neynar SDK](https://docs.neynar.com/docs/how-to-fetch-mutual-followfollowers-in-farcaster.md): Learn how to find mutual follows and followers between Farcaster users using Neynar API. Build social discovery features like 'Followed by X users you follow' similar to Twitter, with comprehensive examples and SDK integration for enhanced user connections.
- [How to fetch notifications for a Farcaster user](https://docs.neynar.com/docs/how-to-fetch-notification-for-a-user.md): Fetch all notifications for a given fid
- [User Balances Directly with FID](https://docs.neynar.com/docs/how-to-fetch-user-balance-using-farcaster-fid.md): This guide provides a step-by-step approach to fetching token balances for a user using their Farcaster FID via the Neynar API.
- [How to Get Cast Information for Farcaster Casts](https://docs.neynar.com/docs/how-to-get-cast-information-for-farcaster-casts.md): To get all information about a cast, traditionally, you have to run a hub or get access to a hosted indexer.
- [How to fetch Farcaster feed for a given user](https://docs.neynar.com/docs/how-to-get-cast-information-for-farcaster-casts-copy-1.md): Fetch the casts that should appear on the home feed for a certain fid
- [Farcaster URLs](https://docs.neynar.com/docs/how-to-get-cast-information-from-url.md): Convert URL into full cast data from Farcaster network through Neynar
- [How to get relevant mints of Farcaster user](https://docs.neynar.com/docs/how-to-get-relevant-mints-of-farcaster-user.md): This guide demonstrates how to use the Neynar SDK to fetch all mint actions relevant to a contract address (and optionally tokenId for ERC1155s) given a user's Ethereum address.
- [Trending Feed on Farcaster](https://docs.neynar.com/docs/how-to-get-trending-casts-on-farcaster.md): Complete tutorial on fetching trending casts and popular content from the Farcaster network using Neynar SDK. Learn to implement trending feeds, discover viral content, and build engaging social media experiences with real-time trending algorithms and content discovery.
- [Frame Interactions](https://docs.neynar.com/docs/how-to-handle-frame-interactions-with-the-neynar-api.md): In this guide, we'll go over how to use our `POST frame/action` API to handle frame interactions on your backend.
- [How to Ingest](https://docs.neynar.com/docs/how-to-ingest.md): Simple guide on how to ingest parquet files for Farcaster data
- [How to integrate Neynar webhooks for real-time events](https://docs.neynar.com/docs/how-to-integrate-neynar-webhooks-for-real-time-events.md): Get real-time events for Farcaster data
- [SIWN: Connect Farcaster accounts](https://docs.neynar.com/docs/how-to-let-users-connect-farcaster-accounts-with-write-access-for-free-using-sign-in-with-neynar-siwn.md): Connect for free using Sign In with Neynar (SIWN). The app gets read and/or write access, Neynar pays for onchain registration.
- [Neynar SQL Playground](https://docs.neynar.com/docs/how-to-query-neynar-sql-playground-for-farcaster-data.md): Query real time Farcaster data for your data analyses, create and share dashboards
- [Zapier workflows](https://docs.neynar.com/docs/how-to-set-up-zapier-workflows-with-neynar-webhooks.md): Add Neynar to your Zap to trigger full workflows based on Farcaster events
- [Webhooks in Dashboard](https://docs.neynar.com/docs/how-to-setup-webhooks-from-the-dashboard.md): User Neynar dev portal to set up webhooks for your app
- [How to set up Neynar webhooks through your developer portal](https://docs.neynar.com/docs/how-to-use-neynar-webhooks.md): Setting up Farcaster webhooks through Neynar developer portal
- [How to Use the Neynar Feed API](https://docs.neynar.com/docs/how-to-use-the-feed-api-1.md): A guide on how to get feed from the Feed API using fid, fids, and parent_url.
- [Verify Neynar Webhooks with HMAC Signatures](https://docs.neynar.com/docs/how-to-verify-the-incoming-webhooks-using-signatures.md): This guide highlights the steps to verify incoming webhooks using signatures
- [How writes to Farcaster work with Neynar managed signers](https://docs.neynar.com/docs/how-writes-to-farcaster-work-with-neynar-managed-signers.md): (incl. frontend)
- [HTML & OpenGraph Metadata in Mini Apps](https://docs.neynar.com/docs/html-metadata-in-frames-and-catalogs.md): Neynar's API now supports HTML metadata for mini apps (prev. called Frames) and catalogs, providing rich information about embedded content. This feature allows you to access Open Graph (OG) data and oEmbed information for frames and catalogs, similar to how it works with casts.
- [Farcaster Username Search in React with Neynar SDK](https://docs.neynar.com/docs/implementing-username-search-suggestion-in-your-farcaster-app.md): Show good recommendations when users search for Farcaster users in your app
- [Stream Real Time Farcaster Data into PostgreSQL](https://docs.neynar.com/docs/indexer-service-pipe-farcaster-data.md): Enterprise-grade Farcaster data indexing service
- [Write Data with Managed Signers](https://docs.neynar.com/docs/integrate-managed-signers.md): Write to Farcaster protocol and let Neynar manage your signers for you
- [Like & Recast](https://docs.neynar.com/docs/liking-and-recasting-with-neynar-sdk.md): Add "like" and "recast" reactions on Farcaster casts
- [Listen for @bot Mentions](https://docs.neynar.com/docs/listen-for-bot-mentions.md): Get notified when someone tags your bot in a cast
- [Make Agents Prompt Transactions](https://docs.neynar.com/docs/make-agents-prompt-transactions.md): Agents prompt transactions to humans with Farcaster frames
- [Farcaster Feed of NFT Owners](https://docs.neynar.com/docs/making-a-farcaster-feed-of-miladies.md): Make a Farcaster feed showing casts from a specific set of users
- [Mini App Authentication](https://docs.neynar.com/docs/mini-app-authentication.md): Complete guide to authentication flows and developer-branded signer creation in Farcaster mini apps
- [Common UX Mistakes and Launch Strategies for Mini Apps](https://docs.neynar.com/docs/mini-app-common-mistakes.md): Avoid these common pitfalls and learn proven launch strategies for viral Farcaster mini apps
- [How to Build Viral Mini Apps](https://docs.neynar.com/docs/mini-app-virality-guide.md): A developer's guide to designing user experiences that spread naturally through Farcaster's social graph using Neynar's infrastructure
- [Mint NFTs for Farcaster Users](https://docs.neynar.com/docs/mint-for-farcaster-users.md): Mint NFTs directly to Farcaster users using their FID with Neynar's server wallets
- [Mutes, Blocks, and Bans](https://docs.neynar.com/docs/mutes-blocks-and-bans.md): Hide users and their activity based on user or developer preference
- [Developer Ecosystem](https://docs.neynar.com/docs/neynar-developer-ecosystem-for-farcaster.md): Building blocks for developing on Farcaster protocol with Neynar infrastructure
- [Set up Neynar with Cursor and MCP server](https://docs.neynar.com/docs/neynar-farcaster-with-cursor.md): Start developing on Farcaster with Neynar and AI enabled Cursor
- [Neynar User Score](https://docs.neynar.com/docs/neynar-user-quality-score.md): Check for quality users using Neynar's user score
- [Trigger Warpcast Direct Casts (DCs) from Neynar Webhooks – Full Guide](https://docs.neynar.com/docs/neynar-webhooks-warpcast-dcs.md): In this guide, we’ll make a webhook which will send a DC to the user based on any action they perform on Farcaster! For this guide, I'll send direct casts to people whose casts include a specific keyword.
- [From Parquet Exports](https://docs.neynar.com/docs/parquet.md): Ingest farcaster data into your database or data warehouse from parquet exports
- [Parquet Schema](https://docs.neynar.com/docs/parquet-schema.md): Schema for data available in parquet ingestion
- [Write Casts to Channel](https://docs.neynar.com/docs/posting-dank-memes-to-farcasters-memes-channel-with-neynars-sdk.md): Step-by-step guide to posting casts and content to specific Farcaster channels using Neynar SDK. Learn channel mechanics, parent URL mapping, and how to write engaging content to community channels like memes, with complete code examples and best practices.
- [Rank High Quality Conversations](https://docs.neynar.com/docs/ranking-for-high-quality-conversations.md): Neynar APIs rank high quality casts higher
- [SIWN: React](https://docs.neynar.com/docs/react-implementation.md): In this guide, we'll take a look at how to implement sign-in with neynar in a React app. For this guide, I am going to be using next.js but the same would work for CRA, remix, or anything based on react!
- [Indexer Service Requirements](https://docs.neynar.com/docs/requirements-for-indexer-service.md): Reach out if you have questions
- [Send Notifications to Mini App Users](https://docs.neynar.com/docs/send-notifications-to-mini-app-users.md): This guide walks you through a simple setup for enabling notifications for your mini app
- [SIWN: React Native](https://docs.neynar.com/docs/sign-in-with-neynar-react-native-implementation.md): In this guide, we'll take a look at how to add sign-in with neynar to a React native application!
- [React Native Implementation - OLD](https://docs.neynar.com/docs/sign-in-with-neynar-react-native-implementation-old.md): Legacy React Native implementation guide for Sign in with Neynar (SIWN) integration in Farcaster apps
- [EIP-712 Farcaster Address Verification with Privy, Viem & Neynar](https://docs.neynar.com/docs/smart-account-verifications.md): A step-by-step guide to verifying an Ethereum address on Farcaster using EIP-712, Privy RPC, Viem, and Neynar.
- [Solana Integration Guide for Farcaster Mini Apps](https://docs.neynar.com/docs/solana-miniapp-features.md): Learn how to integrate Solana wallet features in your Farcaster Mini App with conditional support, message signing, and transaction handling
- [Supercharge EVM & Solana Sign-in](https://docs.neynar.com/docs/supercharge-your-sign-in-with-ethereum-onboarding-with-farcaster.md): Supercharge Sign In with Ethereum and/or Solana in your app with Farcaster profile and social graph data
- [Trending Feed with External Providers](https://docs.neynar.com/docs/trending-feed-w-external-providers.md): Get Farcaster trending casts on a feed with other providers like OpenRank and MBD
- [Sponsor Signers](https://docs.neynar.com/docs/two-ways-to-sponsor-a-farcaster-signer-via-neynar.md): Sponsor it yourself or let Neynar pay for it
- [Understanding Signers in the Farcaster Protocol](https://docs.neynar.com/docs/understanding-signers-in-the-farcaster-protocol-balancing-security-and-convenience.md): By the end of this tutorial, you'll have a Farcaster signer ready to authorize messages on the Farcaster protocol.
- [Unfollow Inactive Users](https://docs.neynar.com/docs/unfollowing-inactive-farcaster-users-with-neynar-sdk.md): Unfollow Farcaster users with Neynar
- [ETH Address FID Contract](https://docs.neynar.com/docs/verifications-contract.md): Get an addresses' connected fid on-chain.
- [Notifications for FID](https://docs.neynar.com/docs/what-does-dwreths-farcaster-notification-look-like.md): Fetch notifications for any Farcaster user
- [Feed of Given Farcaster FID](https://docs.neynar.com/docs/what-does-vitalikeths-farcaster-feed-look-like.md): Show a personalized feed of casts for a specific user on Farcaster
- [How Does Farcaster CRDT Works?](https://docs.neynar.com/docs/what-is-direct-cast-in-farcaster.md): CRDTs are distributed data structures that enable decentralized networks like Farcaster to update and manage global state concurrently without needing a central authority to resolve conflicts.
- [What is Farcaster and why is it important?](https://docs.neynar.com/docs/what-is-farcaster-and-why-is-it-important.md): WIP Vincent
- [What is Farcaster Hub?](https://docs.neynar.com/docs/what-is-farcaster-hub.md): Farcaster is a decentralized social protocol. At the heart of it, there's the Farcaster Hub: a server that stores and replicates message-graph in the network.
- [Choose the Right Signer](https://docs.neynar.com/docs/which-signer-should-you-use-and-why.md): Understand the differences between Neynar-branded and developer-branded signers, and pick the right option for your mini app.
- [How writes to Farcaster work with Neynar managed signers](https://docs.neynar.com/docs/write-to-farcaster-with-neynar-managed-signers.md): Write to Farcaster without having to manage your own signers
- [Compute Units Pricing](https://docs.neynar.com/external-link-0.md)
- [NodeJS-SDK](https://docs.neynar.com/external-link-1.md)
- [Frontend React SDK](https://docs.neynar.com/external-link-2.md)
- [OpenAPI Specification](https://docs.neynar.com/external-link-3.md)
- [Example Apps](https://docs.neynar.com/external-link-4.md)
- [null](https://docs.neynar.com/index.md)
- [Generate event](https://docs.neynar.com/reference/app-host-get-event.md): Returns event object for app host events. Used if the app host intends to sign the event message instead of using Neynar-hosted signers.
- [Enabled notifications](https://docs.neynar.com/reference/app-host-get-user-state.md): Returns the current notification state for a specific user across all mini app domains in this app host. Shows which domains have notifications enabled.
- [Send event](https://docs.neynar.com/reference/app-host-post-event.md): Post an app_host event to the domain's webhook. Events such as enabling or disabling notifications for a user. Provide either a signed message or the signer UUID of an authorized neynar-hosted signers.
- [Best friends](https://docs.neynar.com/reference/best-friends.md): Returns the best friends of a user ranked by mutual affinity score based on interactions with each other.
- [Buy storage](https://docs.neynar.com/reference/buy-storage.md): This api will help you rent units of storage for an year for a specific FID.
A storage unit lets you store 5000 casts, 2500 reactions and 2500 links.
- [Compute Units Pricing](https://docs.neynar.com/reference/compute-units.md): Pricing in compute units for each API
- [Create signer](https://docs.neynar.com/reference/create-signer.md): Creates a signer and returns the signer status. 

**Note**: While tesing please reuse the signer, it costs money to approve a signer.
- [Create transaction pay mini app](https://docs.neynar.com/reference/create-transaction-pay-frame.md): Creates a new transaction pay mini app that can be used to collect payments through a mini app
- [Unban FIDs from app](https://docs.neynar.com/reference/delete-bans.md): Deletes a list of FIDs from the app associated with your API key.
- [Unblock FID](https://docs.neynar.com/reference/delete-block.md): Deletes a block for a given FID.
- [Delete a cast](https://docs.neynar.com/reference/delete-cast.md): Delete an existing cast. 
(In order to delete a cast `signer_uuid` must be approved)
- [Unmute FID](https://docs.neynar.com/reference/delete-mute.md): Deletes a mute for a given FID. This is an allowlisted API, reach out if you want access.
- [Delete mini app](https://docs.neynar.com/reference/delete-neynar-frame.md): Delete an existing mini app, if it was made by the developer (identified by API key)
- [Delete reaction](https://docs.neynar.com/reference/delete-reaction.md): Delete a reaction (like or recast) to a cast 
(In order to delete a reaction `signer_uuid` must be approved)
- [Delete verification](https://docs.neynar.com/reference/delete-verification.md): Removes verification for an eth address for the user 
(In order to delete verification `signer_uuid` must be approved)
- [Delete a webhook](https://docs.neynar.com/reference/delete-webhook.md): Delete a webhook
- [Deploy fungible](https://docs.neynar.com/reference/deploy-fungible.md): Creates a new token.
This is an allowlisted API, reach out if you want access.
- [Developer hosted frames](https://docs.neynar.com/reference/developer-frames.md): Build your own frames and use Neynar to
- [Fetch all channels with their details](https://docs.neynar.com/reference/fetch-all-channels.md): Returns a list of all channels with their details
- [For user](https://docs.neynar.com/reference/fetch-all-notifications.md): Returns a list of notifications for a specific FID.
- [Fetch authorization url](https://docs.neynar.com/reference/fetch-authorization-url.md): Fetch authorization url (Fetched authorized url useful for SIWN login operation)
- [Banned FIDs of app](https://docs.neynar.com/reference/fetch-ban-list.md): Fetches all FIDs that your app has banned.
- [Blocked / Blocked by FIDs](https://docs.neynar.com/reference/fetch-block-list.md): Fetches all FIDs that a user has blocked or has been blocked by
- [Bulk fetch casts](https://docs.neynar.com/reference/fetch-bulk-casts.md): Fetch multiple casts using their respective hashes.
- [Bulk fetch](https://docs.neynar.com/reference/fetch-bulk-channels.md): Returns details of multiple channels
- [By FIDs](https://docs.neynar.com/reference/fetch-bulk-users.md): Fetches information about multiple users based on FIDs
- [By Eth or Sol addresses](https://docs.neynar.com/reference/fetch-bulk-users-by-eth-or-sol-address.md): Fetches all users based on multiple Ethereum or Solana addresses.

Each farcaster user has a custody Ethereum address and optionally verified Ethereum or Solana addresses. This endpoint returns all users that have any of the given addresses as their custody or verified Ethereum or Solana addresses.

A custody address can be associated with only 1 farcaster user at a time but a verified address can be associated with multiple users.
You can pass in Ethereum and Solana addresses, comma separated, in the same request. The response will contain users associated with the given addresses.
- [Metrics for casts](https://docs.neynar.com/reference/fetch-cast-metrics.md): Fetches metrics casts matching a query
- [Cast Quotes](https://docs.neynar.com/reference/fetch-cast-quotes.md): Fetch casts that quote a given cast
- [Reactions for cast](https://docs.neynar.com/reference/fetch-cast-reactions.md): Fetches reactions for a given cast
- [On cast](https://docs.neynar.com/reference/fetch-cast-reactions-1.md): Retrieve all reactions (likes or recasts) on a specific cast in the Farcaster network. The cast is identified by its creator's FID and unique hash. This endpoint helps track engagement metrics and user interactions with specific content.
- [By parent cast](https://docs.neynar.com/reference/fetch-casts-by-parent.md): Retrieve all reply casts (responses) to a specific parent cast in the Farcaster network. Parent casts can be identified using either a combination of FID and hash, or by their URL. This endpoint enables traversal of conversation threads and retrieval of all responses to a particular cast.
- [Chronologically](https://docs.neynar.com/reference/fetch-casts-for-user.md): Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel
- [Mentioning an FID](https://docs.neynar.com/reference/fetch-casts-mentioning-user.md): Fetch casts mentioning a user.
- [Open invites](https://docs.neynar.com/reference/fetch-channel-invites.md): Fetch a list of invites, either in a channel or for a user. If both are provided, open channel invite for that user is returned.
- [Fetch members](https://docs.neynar.com/reference/fetch-channel-members.md): Fetch a list of members in a channel
- [For user by channel](https://docs.neynar.com/reference/fetch-channel-notifications-for-user.md): Returns a list of notifications for a user in specific channels
- [Fetch composer actions](https://docs.neynar.com/reference/fetch-composer-actions.md): Fetches all composer actions on Warpcast. You can filter by top or featured.
- [Embedded URL metadata](https://docs.neynar.com/reference/fetch-embedded-url-metadata.md): Crawls the given URL and returns metadata useful when embedding the URL in a cast.
- [Page of events](https://docs.neynar.com/reference/fetch-events.md): Fetch a list of events.
- [By filters](https://docs.neynar.com/reference/fetch-feed.md): Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.
- [By channel IDs](https://docs.neynar.com/reference/fetch-feed-by-channel-ids.md): Fetch feed based on channel IDs
- [By parent URLs](https://docs.neynar.com/reference/fetch-feed-by-parent-urls.md): Fetch feed based on parent URLs
- [For you](https://docs.neynar.com/reference/fetch-feed-for-you.md): Fetch a personalized For You feed for a user
- [Fetch a list of all the FIDs](https://docs.neynar.com/reference/fetch-fids.md): Fetch a list of all the FIDs.
- [Suggest Follows](https://docs.neynar.com/reference/fetch-follow-suggestions.md): Fetch a list of suggested users to follow. Used to help users discover new users to follow
- [For channel](https://docs.neynar.com/reference/fetch-followers-for-a-channel.md): Returns a list of followers for a specific channel. Max limit is 1000. Use cursor for pagination.
- [Mini apps catalog](https://docs.neynar.com/reference/fetch-frame-catalog.md): A curated list of featured mini apps
- [Relevant mini apps](https://docs.neynar.com/reference/fetch-frame-relevant.md): Fetch a list of mini apps relevant to the user based on casts by users with strong affinity score for the user
- [Casts with v1 frames](https://docs.neynar.com/reference/fetch-frames-only-feed.md): (Deprecated) Fetch feed of casts with v1 frames, reverse chronological order
- [Muted FIDs of user](https://docs.neynar.com/reference/fetch-mute-list.md): Fetches all FIDs that a user has muted.
- [List of mini apps](https://docs.neynar.com/reference/fetch-neynar-frames.md): Fetch a list of mini apps made by the developer (identified by API key)
- [Fetch nonce](https://docs.neynar.com/reference/fetch-nonce.md): Nonce to sign a message
- [List of mini app notification tokens](https://docs.neynar.com/reference/fetch-notification-tokens.md): Returns a list of notifications tokens related to a mini app
- [For user by parent_urls](https://docs.neynar.com/reference/fetch-notifications-by-parent-url-for-user.md): Returns a list of notifications for a user in specific parent_urls
- [10 most popular casts](https://docs.neynar.com/reference/fetch-popular-casts-by-user.md): Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
- [null](https://docs.neynar.com/reference/fetch-power-users.md)
- [null](https://docs.neynar.com/reference/fetch-power-users-lite.md)
- [To a target URL](https://docs.neynar.com/reference/fetch-reactions-by-target.md): Fetch all reactions of a specific type (like or recast) that target a given URL. This endpoint is useful for tracking engagement with content across the Farcaster network.
- [Relevant followers](https://docs.neynar.com/reference/fetch-relevant-followers.md): Returns a list of relevant followers for a specific FID. This usually shows on a profile as "X, Y and Z follow this user".
- [Relevant followers](https://docs.neynar.com/reference/fetch-relevant-followers-for-a-channel.md): Returns a list of relevant channel followers for a specific FID. This usually shows on a channel as "X, Y, Z follow this channel".
- [Relevant owners](https://docs.neynar.com/reference/fetch-relevant-fungible-owners.md): Fetch a list of relevant owners for a on chain asset. If a viewer is provided, only relevant holders will be shown. This usually shows on a fungible asset page as "X, Y, Z and N others you know own this asset".
- [Replies and recasts](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user.md): Fetch recent replies and recasts for a given user FID; sorted by most recent first
- [List signers](https://docs.neynar.com/reference/fetch-signers.md): Fetches a list of signers for a custody address
- [Subscribed to](https://docs.neynar.com/reference/fetch-subscribed-to-for-fid.md): Fetch what FIDs and contracts a FID is subscribed to.
- [Subscribers of a user](https://docs.neynar.com/reference/fetch-subscribers-for-fid.md): Fetch subscribers for a given FID's contracts. Doesn't return addresses that don't have an FID.
- [Hypersub subscription check](https://docs.neynar.com/reference/fetch-subscription-check.md): Check if a wallet address is subscribed to a given STP (Hypersub) contract.
- [Subscriptions created by FID](https://docs.neynar.com/reference/fetch-subscriptions-for-fid.md): Fetch created subscriptions for a given FID's.
- [Channels by activity](https://docs.neynar.com/reference/fetch-trending-channels.md): Returns a list of trending channels based on activity
- [Trending feeds](https://docs.neynar.com/reference/fetch-trending-feed.md): Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.
- [Token balance](https://docs.neynar.com/reference/fetch-user-balance.md): Fetches the token balances of a user given their FID
- [Member of](https://docs.neynar.com/reference/fetch-user-channel-memberships.md): Returns a list of all channels with their details that an FID is a member of. Data may have a delay of up to 1 hour.
- [Following](https://docs.neynar.com/reference/fetch-user-channels.md): Returns a list of all channels with their details that a FID follows.
- [Fetch UserData for a FID](https://docs.neynar.com/reference/fetch-user-data.md): **Note:** one of two different response schemas is returned based on whether the caller provides the `user_data_type` parameter. If included, a single `UserDataAdd` message is returned (or a `not_found` error). If omitted, a paginated list of `UserDataAdd` messages is returned instead.
- [Followers](https://docs.neynar.com/reference/fetch-user-followers.md): Returns a list of followers for a specific FID.
- [To target FID](https://docs.neynar.com/reference/fetch-user-followers-1.md): Fetch a list of users that are following a user.
- [Following](https://docs.neynar.com/reference/fetch-user-following.md): Fetch a list of users who a given user is following. Can optionally include a viewer_fid and sort_type.
- [From source FID](https://docs.neynar.com/reference/fetch-user-following-1.md): Fetch a list of users that a user is following.
- [Following](https://docs.neynar.com/reference/fetch-user-following-feed.md): Fetch feed based on who a user is following
- [Fetch User Information](https://docs.neynar.com/reference/fetch-user-information.md)
- [User interactions](https://docs.neynar.com/reference/fetch-user-interactions.md): Returns a list of interactions between two users
- [Fetch a list of on-chain events provided by an FID](https://docs.neynar.com/reference/fetch-user-on-chain-events.md): Fetch on-chain events provided by a user.
- [Fetch a list of signers provided by an FID](https://docs.neynar.com/reference/fetch-user-on-chain-signers-events.md): **Note:** one of two different response schemas is returned based on whether the caller provides the `signer` parameter. If included, a single `OnChainEventSigner` message is returned (or a `not_found` error). If omitted, a non-paginated list of `OnChainEventSigner` messages is returned instead.
- [Reactions for user](https://docs.neynar.com/reference/fetch-user-reactions.md): Fetches reactions for a given user
- [By FID](https://docs.neynar.com/reference/fetch-user-reactions-1.md): Fetch reactions by a user.
- [Reciprocal Followers](https://docs.neynar.com/reference/fetch-user-reciprocal-followers.md): Returns users who the given FID follows and they follow the FID back (reciprocal following relationship)
- [Proof for a username](https://docs.neynar.com/reference/fetch-username-proof-by-name.md): Fetch a proof for a username.
- [Proofs provided by an FID](https://docs.neynar.com/reference/fetch-username-proofs-by-fid.md): Fetch proofs provided by a user.
- [Fetch channels that user is active in](https://docs.neynar.com/reference/fetch-users-active-channels.md): Fetches all channels that a user has casted in, in reverse chronological order.
- [By location](https://docs.neynar.com/reference/fetch-users-by-location.md): Fetches a list of users given a location
- [By FID](https://docs.neynar.com/reference/fetch-users-casts-1.md): Fetch user's casts.
- [Analytics for the mini app](https://docs.neynar.com/reference/fetch-validate-frame-analytics.md): Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.
- [All mini apps validated by user](https://docs.neynar.com/reference/fetch-validate-frame-list.md): Fetch a list of all the mini apps validated by a user
- [Provided by an FID](https://docs.neynar.com/reference/fetch-verifications-by-fid.md): Fetch verifications provided by a user.
- [Associated webhooks of user](https://docs.neynar.com/reference/fetch-webhooks.md): Fetch a list of webhooks associated to a user
- [Follow a channel](https://docs.neynar.com/reference/follow-channel.md): Follow a channel
- [Follow user](https://docs.neynar.com/reference/follow-user.md): Follow a user 
(In order to follow a user `signer_uuid` must be approved)
- [Fetch fresh FID](https://docs.neynar.com/reference/get-fresh-account-fid.md): Fetches FID to [assign it to new user](https://docs.neynar.com/reference/register-account)
- [Simulate NFT mint calldata](https://docs.neynar.com/reference/get-nft-mint.md): Simulates mint calldata for the given recipients, contract, and network. Useful for previewing calldata and ABI before minting.
- [Get transaction pay mini app](https://docs.neynar.com/reference/get-transaction-pay-frame.md): Retrieves details about a transaction pay mini app by ID
- [Getting Started with Neynar Go SDK](https://docs.neynar.com/reference/getting-started-with-go-sdk.md): Easily call Neynar APIs with our Go SDK
- [Getting Started with Neynar NodeJS SDK](https://docs.neynar.com/reference/getting-started-with-nodejs-sdk.md): Easily call Neynar APIs with our nodejs sdk
- [Getting Started with Neynar Rust SDK](https://docs.neynar.com/reference/getting-started-with-rust-sdk.md): Easily call Neynar APIs with our Rust SDK
- [Invite](https://docs.neynar.com/reference/invite-channel-member.md): Invite a user to a channel
- [Check fname availability](https://docs.neynar.com/reference/is-fname-available.md): Check if a given fname is available
- [By FID and Hash](https://docs.neynar.com/reference/lookup-cast-by-hash-and-fid.md): Lookup a cast by its FID and hash.
- [By hash or URL](https://docs.neynar.com/reference/lookup-cast-by-hash-or-url.md): Gets information about an individual cast by passing in a Farcaster web URL or cast hash
- [Conversation for a cast](https://docs.neynar.com/reference/lookup-cast-conversation.md): Gets all casts related to a conversation surrounding a cast by passing in a cast hash or Farcaster URL. Includes all the ancestors of a cast up to the root parent in a chronological order. Includes all direct_replies to the cast up to the reply_depth specified in the query parameter.
- [Cast conversation summary](https://docs.neynar.com/reference/lookup-cast-conversation-summary.md): Generates a summary of all casts related to a conversation surrounding a cast by passing in a cast hash or Farcaster URL.  Summary is generated by an LLM and is intended to be passed as a context to AI agents.
- [By ID or parent_url](https://docs.neynar.com/reference/lookup-channel.md): Returns details of a channel
- [Status by auth address](https://docs.neynar.com/reference/lookup-developer-managed-auth-address.md): Fetches the status of a developer managed auth address by auth address
- [Status by public key](https://docs.neynar.com/reference/lookup-developer-managed-signer.md): Fetches the status of a developer managed signer by public key
- [Event by ID](https://docs.neynar.com/reference/lookup-event.md): Lookup an event by its ID.
- [Sync Methods](https://docs.neynar.com/reference/lookup-hub-info.md): Retrieve hub information.
- [Mini app by UUID or URL](https://docs.neynar.com/reference/lookup-neynar-frame.md): Fetch a mini app either by UUID or Neynar URL
- [Fetch an on-chain ID Registry Event for a given Address](https://docs.neynar.com/reference/lookup-on-chain-id-registry-event-by-address.md): Fetch an on-chain ID Registry Event for a given Address.
- [By FID or cast](https://docs.neynar.com/reference/lookup-reaction-by-id.md): Lookup a reaction by its FID or cast.
- [Status](https://docs.neynar.com/reference/lookup-signer.md): Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
- [By custody-address](https://docs.neynar.com/reference/lookup-user-by-custody-address.md): Lookup a user by custody-address
- [By username](https://docs.neynar.com/reference/lookup-user-by-username.md): Fetches a single hydrated user object given a username
- [By its FID and target FID](https://docs.neynar.com/reference/lookup-user-relation.md): Lookup a link by its FID and target FID.
- [Allocation of user](https://docs.neynar.com/reference/lookup-user-storage-allocations.md): Fetches storage allocations for a given user
- [FID's limits](https://docs.neynar.com/reference/lookup-user-storage-limit.md): Fetch a user's storage limits.
- [Usage of user](https://docs.neynar.com/reference/lookup-user-storage-usage.md): Fetches storage usage for a given user
- [By X username](https://docs.neynar.com/reference/lookup-users-by-x-username.md): Fetches the users who have verified the specified X (Twitter) username
- [Fetch a webhook](https://docs.neynar.com/reference/lookup-webhook.md): Fetch a webhook
- [Mark as seen](https://docs.neynar.com/reference/mark-notifications-as-seen.md): Mark notifications as seen.
You can choose one of two authorization methods, either:
  1. Provide a valid signer_uuid in the request body (Most common)
  2. Provide a valid, signed "Bearer" token in the request's `Authorization` header similar to the
     approach described [here](https://docs.farcaster.xyz/reference/warpcast/api#authentication)
- [Using Github Copilot](https://docs.neynar.com/reference/migrate-to-neynar-nodejs-sdk-v2-using-github-copilot.md)
- [API overview](https://docs.neynar.com/reference/neynar-farcaster-api-overview.md): Neynar API overview
- [SDK v1 to v2 migration guide](https://docs.neynar.com/reference/neynar-nodejs-sdk-v1-to-v2-migration-guide.md)
- [Post a mini app action, cast action or a cast composer action](https://docs.neynar.com/reference/post-frame-action.md): Post mini app actions, cast actions or cast composer actions to the server
(In order to post any of these actions, you need to have an approved `signer_uuid`)

The POST request to the post_url has a timeout of 5 seconds for mini apps.
- [Signature packet](https://docs.neynar.com/reference/post-frame-action-developer-managed.md): Post a mini app action that has been signed with a developer managed signer

The POST request to the post_url has a timeout of 5 seconds.
- [Mint NFT(s)](https://docs.neynar.com/reference/post-nft-mint.md): Mints an NFT to one or more recipients on a specified network and contract, using a configured server wallet. Contact us to set up your wallet configuration if you don't have one.
- [Ban FIDs from app](https://docs.neynar.com/reference/publish-bans.md): Bans a list of FIDs from the app associated with your API key. Banned users, their casts and reactions will not appear in feeds.
- [Block FID](https://docs.neynar.com/reference/publish-block.md): Adds a block for a given FID.
- [Post a cast](https://docs.neynar.com/reference/publish-cast.md): Posts a cast or cast reply. Works with mentions and embeds.  
(In order to post a cast `signer_uuid` must be approved)
- [User actions across apps](https://docs.neynar.com/reference/publish-farcaster-action.md): Securely communicate and perform actions on behalf of users across different apps. It enables an app to send data or trigger actions in another app on behalf of a mutual user by signing messages using the user's Farcaster signer.
- [Send notifications](https://docs.neynar.com/reference/publish-frame-notifications.md): Send notifications to interactors of a mini app
- [Submit signed message](https://docs.neynar.com/reference/publish-message.md): Submit a message to the Farcaster network.
- [Publish message](https://docs.neynar.com/reference/publish-message-to-farcaster.md): Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
- [Mute FID](https://docs.neynar.com/reference/publish-mute.md): Adds a mute for a given FID. This is an allowlisted API, reach out if you want access.
- [Create mini app](https://docs.neynar.com/reference/publish-neynar-frame.md): Create a new mini app with a list of pages.
- [Post a reaction](https://docs.neynar.com/reference/publish-reaction.md): Post a reaction (like or recast) to a given cast 
(In order to post a reaction `signer_uuid` must be approved)
- [Add verification](https://docs.neynar.com/reference/publish-verification.md): Adds verification for an eth address or contract for the user 
(In order to add verification `signer_uuid` must be approved)
- [Create a webhook](https://docs.neynar.com/reference/publish-webhook.md): Create a webhook
- [Quickstart](https://docs.neynar.com/reference/quickstart.md): Getting started with the Neynar Farcaster API
- [Register new account](https://docs.neynar.com/reference/register-account.md): Register account on farcaster. 

**Note:** This API must be called within 10 minutes of the fetch FID API call (i.e., /v2/farcaster/user/fid). Otherwise, Neynar will assign this FID to another available user.
- [Register Farcaster account onchain](https://docs.neynar.com/reference/register-account-onchain.md): Register a new farcaster account onchain. Optionally you can pass in signers to register a new account and create multiple signers in a single transaction
- [Register New user](https://docs.neynar.com/reference/register-new-user.md): Register new user on Farcaster protocol
- [Register Signed Key](https://docs.neynar.com/reference/register-signed-key.md): Registers an app FID, deadline and a signature. Returns the signer status with an approval url.
- [Register Signed Key](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-auth-address.md): Allow apps to register an Ethereum addresses as authorized "auth addresses" for a user's Farcaster account, enabling seamless Sign-In With Farcaster (SIWF) across applications without repeated custody wallet authorizations.
- [Register Signed Key](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer.md): Registers an signed key and returns the developer managed signer status with an approval url.
- [Remove user](https://docs.neynar.com/reference/remove-channel-member.md): Remove a user from a channel or a user's invite to a channel role
- [Accept or reject an invite](https://docs.neynar.com/reference/respond-channel-invite.md): Accept or reject a channel invite
- [Search for casts](https://docs.neynar.com/reference/search-casts.md): Search for casts based on a query string, with optional AND filters
- [Search by ID or name](https://docs.neynar.com/reference/search-channels.md): Returns a list of channels based on ID or name
- [Search mini apps](https://docs.neynar.com/reference/search-frames.md): Search for mini apps based on a query string
- [Search for Usernames](https://docs.neynar.com/reference/search-user.md): Search for Usernames
- [Send fungibles](https://docs.neynar.com/reference/send-fungibles-to-users.md): Send fungibles in bulk to several farcaster users. A funded wallet is to required use this API. React out to us on the Neynar channel on farcaster to get your wallet address.
- [Unfollow a channel](https://docs.neynar.com/reference/unfollow-channel.md): Unfollow a channel
- [Unfollow user](https://docs.neynar.com/reference/unfollow-user.md): Unfollow a user 
(In order to unfollow a user `signer_uuid` must be approved)
- [Update Follow / Unfollow](https://docs.neynar.com/reference/update-follow-unfollow.md): Follow a new user or unfollow an existing user, for a given Farcaster user
- [Update mini app](https://docs.neynar.com/reference/update-neynar-frame.md): Update an existing mini app with a list of pages, if it was made by the developer (identified by API key)
- [Update user profile](https://docs.neynar.com/reference/update-user.md): Update user profile 
(In order to update user's profile `signer_uuid` must be approved)
- [Overview](https://docs.neynar.com/reference/update-user-profile-1.md): Update profile information and connected addresses
- [Update a webhook](https://docs.neynar.com/reference/update-webhook.md): Update a webhook
- [Update webhook status](https://docs.neynar.com/reference/update-webhook-active-status.md): Update webhook active status
- [Validate mini app action](https://docs.neynar.com/reference/validate-frame-action.md): Validates a mini app against by an interacting user against a Farcaster Hub
(In order to validate a mini app, message bytes from Frame Action must be provided in hex)
- [Validate signed message](https://docs.neynar.com/reference/validate-message.md): Validate a message on the Farcaster network.
- [Rate Limits](https://docs.neynar.com/reference/what-are-the-rate-limits-on-neynar-apis.md): Rate limits are set per subscription plan


## Optional

- [Status](https://status.neynar.com/)
- [Blog](https://neynar.com/blog)
- [Get Help →](https://join.slack.com/t/neynarcommunity/shared_invite/zt-3a4zrezxu-ePFVx2wKHvot1TLi2mVHkA)